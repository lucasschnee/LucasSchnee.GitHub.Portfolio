# Lucas Schnee
import numpy as np

_lambda = float(input("Enter Lambda: "))
N = 10
c = 1/4
X_lst = []
Y_lst = []


# get_training_set()
for _ in range(N):
    X_1 = np.random.normal(0, 1)
    X_3 = np.random.normal(0, 1)
    W = np.random.normal(0, 1)
    X_2 = X_1 + (c * W)
    Z = np.random.normal(0, 1)
    Y = (3 * X_1) + (2 * X_2) + X_3 + Z
    X = [X_1, X_2, X_3]
    X_lst.append(X)
    Y_lst.append(Y)

X_arr = np.array(X_lst)
Y_arr = np.array([Y_lst]).T


# lin_reg()
X_arr_T = X_arr.T
DTD = np.matmul(X_arr_T, X_arr)
DTD_inv = np.linalg.inv(DTD)
DTY = np.matmul(X_arr_T, Y_arr)
beta_lr = np.matmul(DTD_inv, DTY)


# ridge_regression()
I_3 = np.identity(3)
_lambda_I = _lambda * I_3
A = np.add(DTD, _lambda_I)
A_inv = np.linalg.inv(A)
beta_rr = np.matmul(A_inv, DTY)


# get_testing_set()
K = 1000
X_lst_test = []
Y_lst_test = []
for _ in range(K):
    X1 = np.random.normal(0, 1)
    X3 = np.random.normal(0, 1)
    W = np.random.normal(0, 1)
    X2 = X1 + (c * W)
    Z = np.random.normal(0, 1)
    Y = (3 * X1) + (2 * X2) + X3 + Z
    X = [X1, X2, X3]
    X_lst_test.append(X)
    Y_lst_test.append(Y)

X_test_arr = np.array(X_lst_test)

lr_mat = np.matmul(X_test_arr, beta_lr)
rr_mat = np.matmul(X_test_arr, beta_rr)

rr_lst = rr_mat.tolist()
lr_lst = lr_mat.tolist()

rr_i = []
lr_i = []


for i in range(K):
    rr_tmp = (rr_lst[i][0])
    rr_i.append(rr_tmp)
    lr_tmp = (lr_lst[i][0])
    lr_i.append(lr_tmp)


# get_lr_error()
lr_error = 0
for i in range(K):
    error_lr_tmp = (Y_lst_test[i] - lr_i[i]) ** 2
    lr_error += error_lr_tmp


# get_rr_error()
rr_error = 0
for i in range(K):
    error_rr_tmp = (Y_lst_test[i] - rr_i[i]) ** 2
    rr_error += error_rr_tmp


# get_avg_error()
avg_lr_error = lr_error / 1000
avg_rr_error = rr_error / 1000

print()
print("Avg lr error:", avg_lr_error)
print()
print("Avg rr error:", avg_rr_error)
