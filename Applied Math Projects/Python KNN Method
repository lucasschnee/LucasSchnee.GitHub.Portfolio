# Lucas Schnee
# knn method
import random
import numpy as np
import matplotlib.pyplot as plt

def get_N():
    n = int(input('Value of N: '))
    return n

def get_K():
    k = int(input('Value of K: '))
    return k

def get_Sigma():
    s = int(input('Value of Sigma: '))
    return s

def get_x():
    x = [i * .01 for i in range(100)]
    y = [(i * 3) * .01 for i in range(100)]
    plt.plot(x, y, "r")
    return x

def training_set_x(N):
    training_set_x = []
    for i in range(0, N):
        xx = random.uniform(0, 1)
        training_set_x.append(xx)
    training_set_x.sort()
    return training_set_x

def training_set_y(S, training_set_x):
    training_set_y_hat = []
    for i in range(len(training_set_x)):
        z = np.random.normal(0, S)
        yy = (training_set_x[int(i)] * 3) + z
        training_set_y_hat.append(yy)
    return training_set_y_hat

def residual_calc(x, training_set_x, K):
    dist_list = []
    for value in range(len(training_set_x)):
        dist = abs(x - training_set_x[int(value)])
        dist_list.append(dist)
    dist_list.sort()
    dist_list[:] = dist_list[:K]
    return dist_list

def get_avg(final, k):
    avg = sum(final) / k
    return avg

def res_lst(x, training_set_x):
    lst_residuals = []
    for i in range(len(training_set_x)):
        distances = []
        for j in range(len(x)):
            dist = abs(x[j] - training_set_x[i])
            distances.append(dist)
        lst_residuals.append(distances)

    return lst_residuals

def main():
    n = get_N()
    k = get_K()
    s = get_Sigma()
    x = get_x()
    t_set_x = training_set_x(n)
    t_set_y = training_set_y(s, t_set_x)
    residual_list = res_lst(x, t_set_x)
    print(x)
    f_hat = []

    for i in range(len(x)):
        final = []
        k_closest = residual_calc(x[i], t_set_x, k)

        for val in range(len(k_closest)):
            for x_val in range(len(residual_list)):
                if k_closest[val] in residual_list[x_val]:
                    final.append(t_set_y[x_val])

        avg = get_avg(final, k)
        f_hat.append(avg)

    plt.scatter(t_set_x, t_set_y)
    plt.plot(x, f_hat, "m")
    plt.title("n=" + str(n) + " sigma=" + str(s) + " k=" + str(k), loc='right')
    plt.ylabel('y values (g(x) + z)')
    plt.xlabel('x values')
    plt.show()

main()
